import pandas as pd
import streamlit as st



import streamlit as st



indexes = {
    'media': "*md_*_v1.*",
    'science': "sti_science_mag_latest",
    'patents_ru': "sti_patents_rospatent_latest",
    'patents_en': "sti_patents_patstat_latest",
    'grants': "sti_grants_*_v1.*",
    'clinicals': "sti_science_clinicaltrials_v0.*",
    'social_media': "social_media_telegram*",
    'rinc': "sti_science_rinc_v1.0.1",
    'crunchbase': "dir_crunchbase_v0.1.1",
    'onto_companies': "onto_companies_verified",
    'rinc_full_texts_v1.0.1': 'rinc_full_texts_v1.0.1',
    'sti_science_rinc_meta_v1.4': 'sti_science_rinc_meta_v1.4',
}


def check_csv(file_url):
    try:
        df = pd.read_csv(file_url)
        if 'keyword' not in df.columns or 'area' not in df.columns:
            current_col = df.columns.tolist()
            return False, f"CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'keyword' –∏ 'area'. –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ - {current_col}"
        if df.empty:
            return False, "CSV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π."
        return True, df
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}"

def input_csv():
    st.subheader("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
    google_sheets_url = st.text_input("URL Google Sheets —Ñ–∞–π–ª–∞", st.session_state.get('google_sheets_url', ''))

    if google_sheets_url:
        is_valid, data = check_csv(google_sheets_url)
        if is_valid:
            st.session_state['google_sheets_url'] = google_sheets_url
            st.session_state['data'] = data
            if data is not None:
                st.write("–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª CSV –∏–∑ Google Sheets:")

            return data
        else:
            st.error(data)
            st.stop()
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL Google Sheets —Ñ–∞–π–ª–∞.")
        st.stop()

def select_index():
    st.subheader("üìö –í—ã–±–æ—Ä –∏–Ω–¥–µ–∫—Å–∞")

    if 'selected_index' not in st.session_state:
        st.session_state.selected_index = "media"

    selected_index = st.session_state.selected_index
    index_options = indexes.keys()
    index_index = list(index_options).index(selected_index) if selected_index in index_options else 0
    selected_index = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–µ–∫—Å", index_options, index=index_index)
    if selected_index != st.session_state.selected_index:
        st.session_state.selected_index = selected_index

    st.write(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {selected_index}")

    index = indexes[selected_index]
    return index, selected_index


# def select_search_field():
#     st.subheader("üìö –í—ã–±–æ—Ä –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞")
#
#     if 'selected_–∞—à—É–¥–≤' not in st.session_state:
#         st.session_state.selected_index = "article_body"
#
#     selected_field = st.session_state.selected_field
#     field_options = fields.keys()
#     field_index = list(field_options).index(field_index) if field_index in field_options else 0
#     selected_field = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞", field_options, index=field_index)
#     if selected_index != st.session_state.selected_index:
#         st.session_state.selected_index = selected_index
#
#     st.write(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {selected_index}")
#
#     index = indexes[selected_index]
#     return index, selected_index


def choose_significant_terms():
    st.subheader('‚úÇÔ∏è "Significant terms"')

    if 'selected_option' not in st.session_state:
        st.session_state.selected_option = False

    selected_option = st.session_state.selected_option

    selected_option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ 'Significant terms':", [False, True], index=selected_option)

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º session_state
    if selected_option != st.session_state.selected_option:
        st.session_state.selected_option = selected_option

    if selected_option:
        st.write("Significant terms: True")
    else:
        st.write("Significant terms: False")

    return selected_option


import streamlit as st

def input_num_points():
    st.subheader("üìç–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫")

    if 'num_points' not in st.session_state:
        st.session_state.num_points = 100

    selected_num_points = st.session_state.num_points

    num_points = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫", min_value=1, max_value=1000, step=1,  value=selected_num_points)

    if num_points != st.session_state.num_points:
        st.session_state.num_points = num_points

    st.write(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {num_points}")

    return num_points

def min_score():
    st.subheader('üß® "Min Score"Ô∏è')

    if 'min_score' not in st.session_state:
        st.session_state.min_score = 21

    current_min_score = st.session_state.min_score

    min_score = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ Min Score", min_value=5, max_value=30, value=current_min_score, step=1)

    if min_score != st.session_state.min_score:
        st.session_state.min_score = min_score

    st.write(f"Min Score: {min_score}")

    return min_score




import streamlit as st

import streamlit as st

def input_date_range():
    st.subheader("üåö –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç")

    if 'start_date' not in st.session_state:
        st.session_state.start_date = 2018

    if 'end_date' not in st.session_state:
        st.session_state.end_date = 2024

    start_date_options_list = list(range(1991, st.session_state.end_date + 1))
    end_date_options_list = list(range(st.session_state.start_date, 2025))

    current_start_index = start_date_options_list.index(st.session_state.start_date)
    end_start_index = end_date_options_list.index(st.session_state.end_date)

    start_date = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥",
        start_date_options_list,
        index=current_start_index
    )

    if start_date != st.session_state.start_date:
        st.session_state.start_date = start_date


    end_date = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥",
        end_date_options_list,
        index=end_start_index
    )

    if end_date != st.session_state.end_date:
        st.session_state.end_date = end_date

    st.write(f"–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å: {start_date} –ø–æ {end_date}")

    return start_date, end_date





def select_language():
    st.subheader("üá∑üá∫üá¨üáßüá®üá≥ –í—ã–±–æ—Ä —è–∑—ã–∫–∞")

    if 'language' not in st.session_state:
        st.session_state.language = 'ru'

    language_index = ['ru', 'en', 'zh'].index(st.session_state.language)
    language = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", ['ru', 'en', 'zh'], index=language_index)
    st.session_state.language = language
    st.write(f"–Ø–∑—ã–∫: {language}")

    return language

def count_words_in_term():
    st.subheader('üóø –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ—Ä–º–∏–Ω–µ')

    if 'ngram_size' not in st.session_state:
        st.session_state.ngram_size = 1

    step = 1
    ngram_size = st.slider("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ—Ä–º–∏–Ω–µ", min_value=1, max_value=5,
                                 value=st.session_state.ngram_size, step=step)

    st.session_state.ngram_size = ngram_size
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ—Ä–º–∏–Ω–µ: {ngram_size}")

    return ngram_size

